require 'rails_helper'
include SimpleAuthHelper
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe InstitutionsController, type: :controller do


  describe "CRUD functions" do


  # This should return the minimal set of attributes required to create a valid
  # Institution. As you add validations to Institution, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {

    {"id"=>"1",
     "institution_type"=>"3",
     "country"=>"fi",
     "inst_realm"=>"test.fe",
     "address"=>"Lauttasaarentie 3",
     "city"=>"Helsinki",
     "contact_name"=>"Elämäm Mestari",
     "contact_email"=>"elämäm@mestari.fi",
     "contact_phone"=>"050505050",
     "orgnames_attributes"=>[{"lang"=>"en", "name"=>"TestUni"}],
     "orgpolicies_attributes"=>[{"lang"=>"en", "url"=>"lauttasaari.fi/rules_eng"}],
     "orginfos_attributes"=>[{"lang"=>"en", "url"=>"lauttasaari.fi/howtosetup_eng"}]
    }

  }
  let(:valid_new_attributes) {

    {"id"=>"2",
     "institution_type"=>"3",
     "country"=>"fi",
     "inst_realm"=>"testrere.fe",
     "address"=>"Lauttasaarentie 3",
     "city"=>"Helsinki",
     "contact_name"=>"Elämäm Mestari",
     "contact_email"=>"elämäm@mestari.fi",
     "contact_phone"=>"050505050",
     "orgnames_attributes"=>[{"lang"=>"en", "name"=>"TestUni"}],
     "orgpolicies_attributes"=>[{"lang"=>"en", "url"=>"lauttasaari.fi/rules_eng"}],
     "orginfos_attributes"=>[{"lang"=>"en", "url"=>"lauttasaari.fi/howtosetup_eng"}]
    }

  }

  let(:invalid_attributes) {
     {:inst_realm => 'j.fe',  :institution_type => 1, :address => 'laru 21', :city => 'helsinki', :contact_name => 'jees', :contact_email => 'rasdsdf.fi', :contact_phone => '4302432'}

  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # InstitutionsController. Be sure to keep this updated too.
  let(:valid_session) {

  }
  before(:each) do

    expect(controller).to receive(:authenticate)
  end

  describe "GET #index" do
    it "assigns all institutions as @institutions" do
      institution = Institution.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:institutions)).to eq([institution])
    end
  end

  describe "GET #show" do
    it "assigns the requested institution as @institution" do
       institution = Institution.create! valid_attributes
      get :show, :id => 1, session: valid_session
      expect(assigns(:institution).country).to eq('fi')
    end
  end

  describe "GET #new" do
    it "assigns a new institution as @institution" do
      get :new, params: {}, session: valid_session
      expect(assigns(:institution)).to be_a_new(Institution)
    end
  end

  describe "GET #edit" do
    it "assigns the requested institution as @institution" do
      institution = Institution.create! valid_attributes
      get :edit, id: 1, session: valid_session
      expect(assigns(:institution)).to eq(institution)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Institution" do
        expect {
          post :create, institution: valid_new_attributes, session: valid_session
        }.to change(Institution, :count).by(1)
      end

      it "assigns a newly created institution as @institution" do
        post :create, institution: valid_new_attributes, session: valid_session
        expect(assigns(:institution)).to be_a(Institution)
        expect(assigns(:institution)).to be_persisted
      end

      it "redirects to the created institution" do
        post :create, institution: valid_attributes, session: valid_session
        expect(response).to redirect_to(Institution.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved institution as @institution" do
        post :create, institution: invalid_attributes, session: valid_session
        expect(assigns(:institution)).to be_a_new(Institution)
      end

      it "re-renders the 'new' template" do
        post :create, institution: invalid_attributes, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {"id"=>"1",
         "institution_type"=>"2",
         "country"=>"fi",
         "inst_realm"=>"test.fe",
         "address"=>"Lauttasaarentie 10",
         "city"=>"Helsinki",
         "contact_name"=>"Elämäm Mestari",
         "contact_email"=>"elämäm@mestari.fi",
         "contact_phone"=>"050505050",
         "orgnames_attributes"=>[{"lang"=>"en", "name"=>"TestUni"}],
         "orgpolicies_attributes"=>[{"lang"=>"en", "url"=>"lauttasaari.fi/rules_eng"}],
         "orginfos_attributes"=>[{"lang"=>"en", "url"=>"lauttasaari.fi/howtosetup_eng"}]
        }
      }
      let(:invalid_attributes) {
            {"id"=>"1",
             "institution_type"=>"1",
             "country"=>"fi",
             "inst_realm"=>"test.fe",
             "address"=>"Lauttasaarentie 10",
             "city"=>"Helsinki",
             "contact_name"=>"Elämäm Mestari",
             "contact_email"=>"elämäm@mestari.fi",
             "contact_phone"=>"050505050"
        }

      }
      it "updates the requested institution" do
        institution = Institution.create! valid_attributes
        put :update, id: institution.to_param, institution: new_attributes, session: valid_session
        institution.reload
        expect(assigns(:institution).institution_type).to eq(2)
        expect(assigns(:institution).address).to eq("Lauttasaarentie 10")


      end

      it "assigns the requested institution as @institution" do
        institution = Institution.create! valid_attributes
        put :update, id: institution.to_param, institution: valid_attributes, session: valid_session
        expect(assigns(:institution)).to eq(institution)
      end

      it "redirects to the institution" do
        institution = Institution.create! valid_attributes
        put :update, id: institution.to_param, institution: valid_attributes, session: valid_session
        expect(response).to redirect_to(institution)
      end
    end

    context "with invalid params" do
      it "assigns the institution as @institution" do
        institution = Institution.create! valid_attributes
        put :update, id: institution.to_param, institution: invalid_attributes, session: valid_session
        expect(assigns(:institution)).to eq(institution)
      end

      it "re-renders the 'edit' template" do
        institution = Institution.create! valid_attributes
        put :update, id: institution.to_param, institution: invalid_attributes, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested institution" do
      institution = Institution.create! valid_attributes
      expect {
        delete :destroy, id: institution.to_param, session: valid_session
      }.to change(Institution, :count).by(-1)
    end

    it "redirects to the institutions list" do
      institution = Institution.create! valid_attributes
      delete :destroy, id: institution.to_param, session: valid_session
      expect(response).to redirect_to(institutions_url)
    end
  end
  end
  describe "importer" do
    before(:each) do
          expect(controller).to receive(:authenticate)
        # JUMALAUTA SAATANAN HTTP SIMPLE AUTH.
    end

    it "renders page correctly" do
      # piece of shit authentication.
      get :new_import, :session => {}
      assert_response :success


    end
    it "imports correctly" do
      @file = fixture_file_upload("haagahelia3.xml", 'text/xml')

      post :import, :file => @file, session: {}

      expect(Institution.all.count).to eq(2)

    end

  end

end
